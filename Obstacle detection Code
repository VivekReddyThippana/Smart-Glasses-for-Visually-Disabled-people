import RPi.GPIO as GPIO
import time
import os
import threading

# GPIO setup for Ultrasonic Sensor
TRIG = 23
ECHO = 24
GPIO.setmode(GPIO.BCM)
GPIO.setup(TRIG, GPIO.OUT)
GPIO.setup(ECHO, GPIO.IN)

# Global flag to stop threads gracefully
stop_threads = False

# Function to detect obstacles using Ultrasonic Sensor
def obstacle_detection():
    try:
        while not stop_threads:
            GPIO.output(TRIG, True)
            time.sleep(0.00001)  # 10Âµs pulse
            GPIO.output(TRIG, False)

            start_time = time.time()
            stop_time = time.time()

            # Measure the time of the echo
            while GPIO.input(ECHO) == 0:
                start_time = time.time()
            while GPIO.input(ECHO) == 1:
                stop_time = time.time()

            # Calculate distance in cm
            elapsed_time = stop_time - start_time
            distance = (elapsed_time * 34300) / 2

            # Announce if an obstacle is detected within 4 meter
            if distance < 400:  # 400 cm = 4 meter
                print(f"ðŸ›‘ Obstacle detected at {round(distance, 2)} cm")
                os.system(f"espeak 'Obstacle detected {int(distance)} centimeters ahead'")

            time.sleep(1)  # Check for obstacles every 1 second
    finally:
        GPIO.cleanup()

# Start obstacle detection in a thread
try:
    print("ðŸš€ Starting obstacle detection system...")

    # Start obstacle detection in a thread
    obstacle_thread = threading.Thread(target=obstacle_detection)
    obstacle_thread.start()

    # Keep the main thread running
    while True:
        time.sleep(0.1)

except KeyboardInterrupt:
    print("ðŸ›‘ Stopping the system...")
    stop_threads = True
    obstacle_thread.join()
    GPIO.cleanup()
    print("âœ… System stopped successfully.")
